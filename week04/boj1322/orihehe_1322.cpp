/*
BOJ 1322 - X와 K

시간복잡도 : O(logN)
공간복잡도 : O(1)

X + Y = X | Y 식이 성립하려면 X와 Y를 2진수로 나타냈을 때 각 자릿수별로 수가 달라야 합니다.
따라서 2^0부터(i) X에서 더해져있는 수인지 확인하고, 더해져있지 않다면 Y에 더해줄지를 봐줍니다.

이제 K번째인 Y를 구해야 하니, 어떤 수가 K번째 작은 수인지 생각해봅니다.
K를 2진수로 나타내면 1->1, 2->10, 3->11, 4->100 ... 이고, 작은 순서로 나타납니다.
따라서 K에 t가 더해져 있다면 i를 Y에 더해주고, 아니라면 넘어가줍니다. t는 2^0~ ...

(X | i)값이 X와 같다면 이미 i는 X에 더해져 있는 것이니 이것을 이용하여 구현했습니다.
*/
#include <cstdio>
#define ll long long
using namespace std;

int main() {
	ll x, k, y = 0, t = 1;
	scanf("%lld %lld", &x, &k);
	for (ll i = 1;; i *= 2) {
		if (t > k) break;
		if ((x | i) != x) {  // X에서 켜진 비트가 아니라면 Y에 들어갈 수 있음
			// t는 k의 각 비트 판별하는 변수
			if ((k | t) == k) {  // k에서 켜져있다면
				y += i;
			}
			t *= 2;  
		}
	}
	printf("%lld", y);

	return 0;
}